using Mutagen.Bethesda;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Noggog;

namespace LuxCSreferenceDisabler
{
    public class Program
    {
        private static readonly HashSet<ModKey> vanillaModKeys = new()
        {
            ModKey.FromNameAndExtension("Skyrim.esm"),
            ModKey.FromNameAndExtension("Update.esm"),
            ModKey.FromNameAndExtension("Dawnguard.esm"),
            ModKey.FromNameAndExtension("HearthFires.esm"),
            ModKey.FromNameAndExtension("Dragonborn.esm"),
            ModKey.FromNameAndExtension("ccbgssse001-fish.esm"),
            ModKey.FromNameAndExtension("ccqdrsse001-survivalmode.esl"),
            ModKey.FromNameAndExtension("ccbgssse037-curios.esl"),
            ModKey.FromNameAndExtension("ccbgssse025-advdsgs.esm")
        };

        internal static int nbTotal = 0;

        public static Lazy<Settings> _settings = null!;
        public static Settings Settings => _settings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SynthesisDisabler.esp")
                .Run(args);
        }

        internal static void DisableReference(
            IPatcherState<ISkyrimMod, ISkyrimModGetter> state,
            IModContext<ISkyrimMod, ISkyrimModGetter, IPlaced, IPlacedGetter> placed)
        {
            if (placed is null || placed.Record.Placement is null) return;

            var baseFormKeyProperty = placed.Record.GetType().GetProperty("Base");
            if (baseFormKeyProperty == null) return;
            var baseFormKeyValue = baseFormKeyProperty.GetValue(placed.Record);
            if (baseFormKeyValue == null) return;
            if (!Settings.TargetBaseObjects.Contains((FormKey)baseFormKeyValue)) return;

            var placedState = placed.GetOrAddAsOverride(state.PatchMod);

            // Ensure Placement is not null before accessing Position
            if (placedState.Placement != null)
            {
                // Ensure InitiallyDisabled is set
                placedState.SkyrimMajorRecordFlags =
                    placedState.SkyrimMajorRecordFlags.SetFlag(
                        SkyrimMajorRecord.SkyrimMajorRecordFlag.InitiallyDisabled, true);

                // Add EnableParent if missing
                if (placedState.EnableParent is null)
                {
                    placedState.EnableParent = new EnableParent
                    {
                        Reference = Skyrim.PlayerRef,
                        Flags = EnableParent.Flag.SetEnableStateToOppositeOfParent
                    };
                }
                placedState.EnableParent.Flags.SetFlag(
                    EnableParent.Flag.SetEnableStateToOppositeOfParent, true);

                // Move underground
                placedState.Placement.Position = new P3Float(
                    placedState.Placement.Position.X,
                    placedState.Placement.Position.Y,
                    -30000);

                nbTotal++;
                if (nbTotal % 50 == 0)
                    System.Console.WriteLine($"Properly disabled {nbTotal} placed references...");
            }
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            ILinkCache cache = state.LinkCache;
            var loadorder = state.LoadOrder.PriorityOrder.Where(x => !vanillaModKeys.Contains(x.ModKey));

            System.Console.WriteLine("Disabling target objects...");
            foreach (var placed in loadorder.PlacedObject().WinningContextOverrides(cache))
            {
                DisableReference(state, placed);
            }

            System.Console.WriteLine($"Properly disabled {nbTotal} placed references!");

            // Remove vanilla initially disabled records from patch
            System.Console.WriteLine("Cleaning vanilla disabled records...");
            loadorder = state.LoadOrder.PriorityOrder.Where(x => vanillaModKeys.Contains(x.ModKey));

            foreach (var placed in loadorder
                .Where(x => x.Mod != null) // Ensure x.Mod is not null
                .SelectMany(x => x.Mod!.EnumerateMajorRecords<IPlacedGetter>()) // Use ! to suppress warning
                .Where(r => r.SkyrimMajorRecordFlags.HasFlag(
                    SkyrimMajorRecord.SkyrimMajorRecordFlag.InitiallyDisabled)))
            {
                state.PatchMod.Remove(placed.FormKey, placed.GetType());
            }

            System.Console.WriteLine("Done cleaning vanilla records!");
            System.Console.WriteLine("Final count: " + nbTotal);
        }
    }
}
