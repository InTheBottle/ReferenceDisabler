using Mutagen.Bethesda;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.WPF.Reflection.Attributes;
using Noggog;

namespace LuxCSreferenceDisabler
{
    public class Settings
    {
        [SettingName("Base Objects to Disable")]
        [Tooltip("EditorIDs of the base objects you want to disable references of.")]
        public List<FormLink<IPlaceableObjectGetter>> BaseObjectsToDisable = [];
    }

    public class Program
    {
        private static readonly HashSet<ModKey> vanillaModKeys = new()
        {
            ModKey.FromNameAndExtension("Skyrim.esm"),
            ModKey.FromNameAndExtension("Update.esm"),
            ModKey.FromNameAndExtension("Dawnguard.esm"),
            ModKey.FromNameAndExtension("HearthFires.esm"),
            ModKey.FromNameAndExtension("Dragonborn.esm"),
            ModKey.FromNameAndExtension("ccbgssse001-fish.esm"),
            ModKey.FromNameAndExtension("ccqdrsse001-survivalmode.esl"),
            ModKey.FromNameAndExtension("ccbgssse037-curios.esl"),
            ModKey.FromNameAndExtension("ccbgssse025-advdsgs.esm")
        };

        private static int _nbTotal;

        private static Lazy<Settings> _settings = null!;
        
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SynthesisDisabler.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            var cache = state.LinkCache;

            // Build a HashSet of target FormKeys for fast lookup, filter out empty FormLinks
            var targetKeys = _settings.Value.BaseObjectsToDisable
                .Where(link => link.FormKey != FormKey.Null)
                .Select(link => link.FormKey)
                .ToHashSet();

            Console.WriteLine("Disabling target objects...");
            foreach (var placedContext in state.LoadOrder.PriorityOrder.PlacedObject().WinningContextOverrides(cache))
            {
                var placed = placedContext.Record;

                if (placed.Base.TryResolve<IPlaceableObjectGetter>(cache, out var baseObj))
                {
                    if (targetKeys.Contains(baseObj.FormKey))
                    {
                        var placedState = placedContext.GetOrAddAsOverride(state.PatchMod);

                        // Mark as disabled
                        placedState.SkyrimMajorRecordFlags =
                            placedState.SkyrimMajorRecordFlags.SetFlag(
                                SkyrimMajorRecord.SkyrimMajorRecordFlag.InitiallyDisabled, true);

                        // Add EnableParent if missing
                        if (placedState.EnableParent is null)
                        {
                            placedState.EnableParent = new EnableParent
                            {
                                Reference = Skyrim.PlayerRef,
                                Flags = EnableParent.Flag.SetEnableStateToOppositeOfParent
                            };
                        }
                        placedState.EnableParent.Flags.SetFlag(
                            EnableParent.Flag.SetEnableStateToOppositeOfParent, true);

                        // Move underground
                        if (placedState.Placement != null)
                        {
                            placedState.Placement.Position = new P3Float(
                                placedState.Placement.Position.X,
                                placedState.Placement.Position.Y,
                                -30000);
                        }

                        _nbTotal++;
                        if (_nbTotal % 50 == 0)
                            Console.WriteLine($"Properly disabled {_nbTotal} placed references...");
                    }
                }
            }

            Console.WriteLine($"Properly disabled {_nbTotal} placed references!");

            // Remove vanilla initially disabled records from patch
            Console.WriteLine("Cleaning vanilla disabled records...");
            var loadOrder = state.LoadOrder.PriorityOrder.Where(x => vanillaModKeys.Contains(x.ModKey));

            foreach (var placed in loadOrder
                .Where(x => x.Mod != null)
                .SelectMany(x => x.Mod!.EnumerateMajorRecords<IPlacedGetter>())
                .Where(r => r.SkyrimMajorRecordFlags.HasFlag(
                    SkyrimMajorRecord.SkyrimMajorRecordFlag.InitiallyDisabled)))
            {
                state.PatchMod.Remove(placed.FormKey, placed.GetType());
            }

            Console.WriteLine("Done cleaning vanilla records!");
            Console.WriteLine("Final count: " + _nbTotal);
        }
    }
}
